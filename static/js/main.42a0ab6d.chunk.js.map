{"version":3,"sources":["VendingMachine.js","Chips.js","Fish.js","Soda.js","App.js","serviceWorker.js","index.js"],"names":["VendingMachine","className","src","alt","exact","to","Component","Chips","Fish","Soda","state","num","handleClick","setState","st","this","onClick","App","activeClassName","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kXAwBeA,G,6KAlBP,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,uBAAuBC,IAAK,6BAA8BC,IAAI,oBAC7E,yBAAKF,UAAU,eACX,yBAAKA,UAAU,YACX,kEAEJ,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMG,OAAK,EAACH,UAAU,YAAYI,GAAG,UAArC,SACA,kBAAC,IAAD,CAAMD,OAAK,EAACH,UAAU,YAAYI,GAAG,SAArC,QACA,kBAAC,IAAD,CAAMD,OAAK,EAACH,UAAU,YAAYI,GAAG,SAArC,e,GAZKC,cCgBdC,G,6KAdP,OACI,yBAAKN,UAAU,SACX,yBAAKA,UAAU,YAAYC,IAAK,oBAAqBC,IAAI,UACzD,yBAAKF,UAAU,OACX,qCACA,kBAAC,IAAD,CAAMA,UAAU,OAAQG,OAAK,EAACC,GAAG,KAAjC,kB,GAPAC,cCcLE,G,6KAZP,OACI,yBAAKP,UAAU,QACX,yBAAKA,UAAU,OACX,wDAA8B,KAC9B,kBAAC,IAAD,CAAMA,UAAU,OAAOI,GAAG,KAA1B,kB,GANDC,cCyBJG,G,kNAzBXC,MAAQ,CACJC,IAAK,G,EAGTC,YAAc,WACV,EAAKC,UAAU,SAAAC,GAAE,MAAK,CAClBH,IAAKG,EAAGH,IAAM,O,uDAIlB,OACI,yBAAKV,UAAU,QACX,yBAAKA,UAAU,WAAWC,IAAK,wBAAyBC,IAAI,cAC5D,yBAAKF,UAAU,OACX,6BACI,qCAAWc,KAAKL,MAAMC,KACtB,4BAAQV,UAAU,cAAce,QAASD,KAAKH,aAA9C,c,GAjBLN,c,MCyBJW,MApBf,WACE,OACE,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAASG,OAAK,EAACH,UAAU,WAAWiB,gBAAgB,cAAcb,GAAG,KAArE,QACA,kBAAC,IAAD,CAASD,OAAK,EAACH,UAAU,WAAWiB,gBAAgB,cAAcb,GAAG,UAArE,SACA,kBAAC,IAAD,CAASD,OAAK,EAACH,UAAU,WAAWiB,gBAAgB,cAAcb,GAAG,SAArE,QACA,kBAAC,IAAD,CAASD,OAAK,EAACH,UAAU,WAAWiB,gBAAgB,cAAcb,GAAG,SAArE,SAEF,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOD,OAAK,EAACe,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACe,KAAK,SAASC,UAAWb,IACtC,kBAAC,IAAD,CAAOH,OAAK,EAACe,KAAK,QAAQC,UAAWX,IAHzC,aAG2D,kBAAC,IAAD,CAAOL,OAAK,EAACe,KAAK,SAASC,UAAWb,IAC7F,kBAAC,IAAD,CAAOH,OAAK,EAACe,KAAK,QAAQC,UAAWZ,OCT3Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42a0ab6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './VendingMachine.css';\n\nclass VendingMachine extends Component {\n    render(){\n        return(\n            <div className=\"Vending-Machine\" >\n                <img className=\"Image-VendingMachine\" src={\"/images/vendingMachine.jpg\"} alt=\"Vending Machine\" />\n                <div className=\"little-menu\">\n                    <div className=\"sideLeft\">\n                        <h2>This is an awsome Vending Machine</h2>\n                    </div>\n                    <div className=\"sideRight\">\n                        <Link exact className=\"Mini-Menu\" to=\"/Chips\">Chips</Link>\n                        <Link exact className=\"Mini-Menu\" to=\"/Soda\">Soda</Link>\n                        <Link exact className=\"Mini-Menu\" to=\"/Fish\">Fish</Link>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default VendingMachine;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Chips.css';\n\nclass Chips extends Component {\n    render(){\n        return(\n            <div className=\"Chips\">\n                <img className=\"Chips-img\" src={\"/images/chips.jpg\"} alt=\"Chips\" />\n                <div className=\"Box\">\n                    <h1> Chips \n                    <Link className=\"Link\"  exact to=\"/\">Go Back</Link>\n                    </h1>\n                </div>\n               \n            </div>\n        );\n    }\n}\n\nexport default Chips;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Fish.css';\n\nclass Fish extends Component {\n    render(){\n        return(\n            <div className=\"Fish\">\n                <div className=\"Box\">\n                    <h1>Your are getting a Fish! {\"\\n\"}\n                    <Link className=\"Link\" to=\"/\">GO BACK</Link>\n                    </h1>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Fish;","import React, { Component } from 'react';\nimport './Soda.css';\n\nclass Soda extends Component {\n    state = {\n        num: 0\n    }\n\n    handleClick = () => {\n        this.setState( st => ({\n            num: st.num + 1\n        }));\n    }\n    render(){\n        return(\n            <div className=\"Soda\">\n                <img className=\"Soda-img\" src={\"/images/coca-cola.jpg\"} alt=\"Coca-Cola\"/>\n                <div className=\"Box\">\n                    <div>\n                        <h1>Soda: {this.state.num}</h1>  \n                        <button className=\"Soda-Button\" onClick={this.handleClick}>Qty</button>\n                    </div>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default Soda;","import React from 'react';\nimport { Route, Switch, NavLink } from 'react-router-dom';\nimport VendingMachine from './VendingMachine';\nimport Chips from './Chips';\nimport Fish from './Fish';\nimport Soda from './Soda';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"nav-bar\">\n        <NavLink exact className=\"nav-link\" activeClassName=\"active-link\" to=\"/\">Home</NavLink>\n        <NavLink exact className=\"nav-link\" activeClassName=\"active-link\" to=\"/Chips\">Chips</NavLink>\n        <NavLink exact className=\"nav-link\" activeClassName=\"active-link\" to=\"/Soda\">Soda</NavLink>\n        <NavLink exact className=\"nav-link\" activeClassName=\"active-link\" to=\"/Fish\">Fish</NavLink>      \n      </nav>\n      <Switch>\n          <Route exact path=\"/\" component={VendingMachine} />\n          <Route exact path=\"/Chips\" component={Chips} />\n          <Route exact path=\"/Soda\" component={Soda} />          <Route exact path=\"/chips\" component={Chips} />\n          <Route exact path=\"/Fish\" component={Fish} />\n        </Switch>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}